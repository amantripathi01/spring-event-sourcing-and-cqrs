# ********RoostGPT********

# Test generated by RoostGPT for test karateTest22March using AI Type Open AI and AI Model gpt-4
# 
# Feature file generated for /laureates_get for http method type GET 
# RoostTestHash=41cb7e02aa
# 
# 

# ********RoostGPT********
Feature: Laureates API Testing

Background: 
  * def urlBase = karate.properties['url.base'] || karate.get('urlBase', 'http://localhost:8080')
  * url urlBase

Scenario Outline: Verify the Laureates API with different request parameters
  Given path '/2.1/laureates'
  And params { offset: '<offset>', limit: '<limit>', sort: '<sort>', ID: '<ID>', name: '<name>', gender: '<gender>', motivation: '<motivation>', affiliation: '<affiliation>', residence: '<residence>', birthDate: '<birthDate>', birthDateTo: '<birthDateTo>', deathDate: '<deathDate>', deathDateTo: '<deathDateTo>', foundedDate: '<foundedDate>', birthCity: '<birthCity>', birthCountry: '<birthCountry>', birthContinent: '<birthContinent>', deathCity: '<deathCity>', deathCountry: '<deathCountry>', deathContinent: '<deathContinent>', foundedCity: '<foundedCity>', foundedCountry: '<foundedCountry>', foundedContinent: '<foundedContinent>', HeadquartersCity: '<HeadquartersCity>', HeadquartersCountry: '<HeadquartersCountry>', HeadquartersContinent: '<HeadquartersContinent>', nobelPrizeYear: '<nobelPrizeYear>', yearTo: '<yearTo>', nobelPrizeCategory: '<nobelPrizeCategory>', format: '<format>', csvLang: '<csvLang>' }
  When method get
  Then status 200
  And match response.laureates contains { id: '#number' }
  And match response.meta contains { offset: '#number', limit: '#number', sort: '#string', ID: '#number', name: '#string', gender: '#string', motivation: '#string', affiliation: '#string', residence: '#string', birthDate: '#string', birthDateTo: '#string', deathDate: '#string', deathDateTo: '#string', foundedDate: '#string', birthCity: '#string', birthCountry: '#string', birthContinent: '#string', deathCity: '#string', deathCountry: '#string', deathContinent: '#string', foundedCity: '#string', foundedCountry: '#string', foundedContinent: '#string', HeadquartersCity: '#string', HeadquartersCountry: '#string', HeadquartersContinent: '#string', nobelPrizeYear: '#number', yearTo: '#number', nobelPrizeCategory: '#string', count: '#number' }
  And match response.links contains { first: '#string', prev: '#string', self: '#string', next: '#string', last: '#string' }

  Examples:
    | offset | limit | sort | ID | name | gender | motivation | affiliation | residence | birthDate | birthDateTo | deathDate | deathDateTo | foundedDate | birthCity | birthCountry | birthContinent | deathCity | deathCountry | deathContinent | foundedCity | foundedCountry | foundedContinent | HeadquartersCity | HeadquartersCountry | HeadquartersContinent | nobelPrizeYear | yearTo | nobelPrizeCategory | format | csvLang |
    | 1      | 10    | 'asc' | 1  | 'John' | 'male' | 'Science' | 'University' | 'USA' | '1970-01-01' | '2000-01-01' | '2010-01-01' | '2020-01-01' | '1990-01-01' | 'New York' | 'USA' | 'North America' | 'Los Angeles' | 'USA' | 'North America' | 'Chicago' | 'USA' | 'North America' | 'Washington' | 'USA' | 'North America' | 2000 | 2020 | 'Physics' | 'json' | 'en' |
